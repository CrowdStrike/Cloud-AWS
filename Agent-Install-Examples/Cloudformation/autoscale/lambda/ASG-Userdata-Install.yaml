AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates instances in an ASG.  Lifecycle hooks are included to run a lambda to hide the host in the falcon console during a scale in event.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Tagging Information
        Parameters:
          - Accounting
          - Department
          - Owner
          - Business
      - Label:
          default: Workload Network Configuration
        Parameters:
          - WorkloadVPCCIDR
          - WorkloadPrivateSubnetCIDR1
          - WorkloadPrivateSubnetCIDR2
          - WorkloadPublicSubnetCIDR1
          - WorkloadPublicSubnetCIDR2
      - Label:
          default: Network Configuration
        Parameters:
          - AvailabilityZones

      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - AvailabilityZones
          - KeyPairName
    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      KeyPairName:
        default: Key Pair Name
Parameters:
  FalconCID:
    NoEcho: true
    Description: 'Customer CID for the Falcon Installation'
    Type: String
  FalconClientID:
    Type: String
    NoEcho: true
    Description: Falcon API Console Client ID
  FalconClientSecret:
    Type: String
    NoEcho: true
    Description: Falcon API Console Client Secret
  FalconInstallerBucket:
    Type: String
    Description: Name of the S3 bucket containing the falcon sensor installer.
  CSCloud:
    Type: String
    Description: Your CrowdStrike cloud
    AllowedValues:
      - us-1
      - us-2
      - eu-1
    Default: us-1
  FalconFileName:
    Type: String
    Description: 'Name of the Linux install package. For example falcon-sensor-6.50.0-14712.amzn2.x86_64.rpm'
  Owner:
    Type: String
    Description: Owner/Creator of resource
    MaxLength: 20
  Business:
    Type: String
    Description: Department
    MaxLength: 20

  Accounting:
    Type: String
    Description: Billing Account
    MaxLength: 20

  Department:
    Type: String
    Description: Department
    MaxLength: 20

  AvailabilityZones:
    Description: Availability Zone to use for the subnets in the VPC. You should select
      two so that we can deploy the ALB, but we just use 1 (the first).
    Type: List<AWS::EC2::AvailabilityZone::Name>
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: AWS::EC2::KeyPair::KeyName


  WorkloadPrivateSubnetCIDR1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.16.64.16/28
    Description: CIDR block for isolated private subnet.
    Type: String
  WorkloadPublicSubnetCIDR1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.16.64.0/28
    Description: CIDR Block for the public DMZ subnet for secure administrative entry
    Type: String
  WorkloadPrivateSubnetCIDR2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.16.64.48/28
    Description: CIDR block for isolated private subnet.
    Type: String
  WorkloadPublicSubnetCIDR2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.16.64.32/28
    Description: CIDR Block for the public DMZ subnet for secure administrative entry
    Type: String
  WorkloadVPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.16.64.0/24
    Description: CIDR Block for the VPC
    Type: String
  LatestLinuxAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  CrowdStrikeSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      #      Metadata:
      #        cfn_nag:
      #          rules_to_suppress:
      #            - id: W77
      #              reason: Not required to be shared across accounts.
      Name: !Join
        - '-'
        - - 'CrowdStrikeHorizonAPISecret'
          - !Ref 'AWS::StackName'
      Description: 'Client ID and Secret for the Falcon API'
      SecretString: !Sub |
        {
          "client_id": "${FalconClientID}",
          "client_secret": "${FalconClientSecret}",
          "cid": "${FalconCID}",
          "cs_cloud":"${CSCloud}"
        }
  WorkloadVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'WorkloadVPCCIDR'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Workload-VPC
        - Key: CreatedBy
          Value: ASG Test Script
  WorkloadNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - WorkloadNatEip
          - AllocationId
      SubnetId:
        Ref: WorkloadPublicSubnet1
  WorkloadInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: CreatedBy
          Value: ASG Test Script
  WorkloadVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'WorkloadVPC'
      InternetGatewayId: !Ref 'WorkloadInternetGateway'
  WorkloadPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: WorkloadVPC
      CidrBlock: !Ref 'WorkloadPrivateSubnetCIDR1'
      AvailabilityZone: !Select
        - '0'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Private subnet
  WorkloadPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'WorkloadVPC'
      CidrBlock: !Ref 'WorkloadPublicSubnetCIDR1'
      AvailabilityZone: !Select
        - '0'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Public subnet
        - Key: Network
          Value: Public
        - Key: CreatedBy
          Value: ASG
      MapPublicIpOnLaunch: true
  WorkloadPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: WorkloadVPC
      CidrBlock: !Ref 'WorkloadPublicSubnetCIDR2'
      AvailabilityZone: !Select
        - '1'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Public subnet
        - Key: Network
          Value: Public
        - Key: CreatedBy
          Value: ASG
      MapPublicIpOnLaunch: true
  WorkloadPrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: WorkloadVPC
      Tags:
        - Key: Name
          Value: Private subnet
        - Key: Network
          Value: Private
  WorkloadPrivateSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'WorkloadPrivateSubnetRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'WorkloadNATGateway'
  WorkloadPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'WorkloadPrivateSubnet'
      RouteTableId: !Ref 'WorkloadPrivateSubnetRouteTable'
  WorkloadPublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: WorkloadVPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  WorkloadPublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'WorkloadPublicSubnetRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'WorkloadInternetGateway'
  WorkloadPublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'WorkloadPublicSubnet1'
      RouteTableId: !Ref 'WorkloadPublicSubnetRouteTable'
  WorkloadPublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'WorkloadPublicSubnet2'
      RouteTableId: !Ref 'WorkloadPublicSubnetRouteTable'
  WorkloadNatEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  WorkloadServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group with HTTP access on port 80
      VpcId:
        Ref: WorkloadVPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - alb-sg
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: '-1'
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: '-1'
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
  TestLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: TestLambdaExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - ec2:*
              - Resource: arn:aws:logs:*:*:*
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                  - !Sub 'arn:${AWS::Partition}:secretsmanager:*:*:secret:CrowdStrikeHorizonAPISecret-*'
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
              - Resource:
                  - !Sub 'arn:aws:autoscaling:*:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AWS::StackName}-Workload-ASG'
                Effect: Allow
                Action:
                  - autoscaling:CompleteLifecycleAction

  lambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Ref 'FalconInstallerBucket'
        S3Key: falconpy-layer.zip
      Description: Layer for requests package
      LayerName: requests-package

  ManageInstanceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: manage_instance.lambda_handler
      Role: !GetAtt 'TestLambdaExecutionRole.Arn'
      Code:
        S3Bucket: !Ref 'FalconInstallerBucket'
        S3Key: manage_instance.zip
      Layers:
        - !Ref lambdaLayer
      Environment:
        Variables:
          SECRET_STORE_NAME: !Join
            - '-'
            - - 'CrowdStrikeHorizonAPISecret'
              - !Ref 'AWS::StackName'
          REGION: !Ref AWS::Region
          CS_CLOUD: !Ref CSCloud
      Runtime: python3.8
      Timeout: 60

  LambdaFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 'ManageInstanceLambda.Arn'
      Principal: sns.amazonaws.com
  #      SourceArn: !GetAtt 'LambdaASGSNSTopic.Arn'

  LambdaASGSNSTopic:
    DependsOn: ManageInstanceLambda
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ASGTopic
      Subscription:
        - Endpoint: !GetAtt 'ManageInstanceLambda.Arn'
          Protocol: lambda

  ASGLifecycleHookL:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      DefaultResult: ABANDON
      HeartbeatTimeout: 90
      AutoScalingGroupName: !Ref 'WebServerGroup'
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      NotificationTargetARN: !Ref 'LambdaASGSNSTopic'
      RoleARN: !GetAtt 'ASGNotifierRole.Arn'

  ASGLifecycleHookT:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      DefaultResult: CONTINUE
      HeartbeatTimeout: 90
      AutoScalingGroupName: !Ref 'WebServerGroup'
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: !Ref 'LambdaASGSNSTopic'
      RoleARN: !GetAtt 'ASGNotifierRole.Arn'
  ASGNotifierRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  ASGNotifierRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ASGNotifierRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref 'LambdaASGSNSTopic'
      Roles:
        - !Ref 'ASGNotifierRole'
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Workload-ASG
      Cooldown: '60'
      DesiredCapacity: '1'
      NotificationConfigurations:
        - NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
          TopicARN: !Ref LambdaASGSNSTopic
      VPCZoneIdentifier:
        - !Ref  'WorkloadPublicSubnet1'
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '0'
      MaxSize: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: 'Workload'
        - Key: CRWD_MANAGED
          PropagateAtLaunch: true
          Value: 'YES'
        - Key: tag-accounting
          PropagateAtLaunch: true
          Value: !Ref Accounting
        - Key: tag-business
          PropagateAtLaunch: true
          Value: !Ref Business
        - Key: tag-department
          PropagateAtLaunch: true
          Value: !Ref Department
        - Key: tag-owner
          PropagateAtLaunch: true
          Value: !Ref Owner
      TargetGroupARNs:
        - !Ref 'PublicLoadBalancerTargetGroup'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !Ref 'LatestLinuxAMI'
      SecurityGroups:
        - !Ref 'WorkloadServerSecurityGroup'
      IamInstanceProfile: !Ref WorkloadBootstrapInstanceProfile
      InstanceType: m4.large
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          INSTALLPARAMS="--tags=\"autoscale_test\""
          echo 'Starting'
          REGION=`curl http://169.254.169.254/latest/dynamic/instance-identity/document|grep region|awk -F\" '{print $4}'`
          echo $REGION
          echo 'Configuring region'
          aws configure set region $REGION
          aws s3 cp s3://${FalconInstallerBucket}/${FalconFileName} ./
          yum install ${FalconFileName} -y
          eval /opt/CrowdStrike/falconctl -s --cid="${FalconCID}"
          #Starting Falcon sensor
          if [[ -L "/sbin/init" ]]
          then
              systemctl start falcon-sensor
          else
              sudo service falcon-sensor start
          fi
          cd /var/tmp

          # Verification
          if [[ -n $(ps -e | grep falcon-sensor) ]]
          then
            echo "Successfully finished installation..."
          else
            echo "Installation failed..."
            exit 1
          fi
  WorkloadBootstrapRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: WorkloadlBootstrapRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [ s3:GetObject, s3:GetObjectVersion ]
                Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref 'FalconInstallerBucket', /* ] ]
              - Effect: Allow
                Action: [ s3:ListBucket ]
                Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref 'FalconInstallerBucket' ] ]
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: '*'
  WorkloadBootstrapInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'WorkloadBootstrapRole'

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - Workload-ALB
      SecurityGroups:
        - !Ref 'PublicLoadBalancerSecurityGroup'
      Subnets:
        - !Ref 'WorkloadPublicSubnet1'
        - !Ref 'WorkloadPublicSubnet2'
      Scheme: internet-facing

  #  PublicLoadBanlancerListener:
  #    Type: AWS::ElasticLoadBalancingV2::Listener
  #    Properties:
  #      DefaultActions:
  #        - Type: forward
  #          TargetGroupArn: !Ref 'PublicLoadBalancerTargetGroup'
  #      LoadBalancerArn: !Ref 'PublicLoadBalancer'
  #      Port: 80
  #      Protocol: HTTP
  PublicLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckProtocol: HTTP
      HealthCheckPort: '8080'
      HealthCheckPath: /
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: WorkloadVPC

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public ALB Security Group with HTTP access on port 80 from
        the internet
      VpcId:
        Ref: WorkloadVPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - PublicLoadBalancerSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: '0.0.0.0/0'



