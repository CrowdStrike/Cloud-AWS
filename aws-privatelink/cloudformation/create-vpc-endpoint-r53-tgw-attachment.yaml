---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template deploys a VPC with a pair of private subnets spread across
  two Availabilty Zones. Creates a VPC endpoint for CrowdStrike Falcon Services.

Parameters:
  S3Bucket:
    Description: S3 Bucket for lambda functions
    Type: String
  KeyName:
    Description: ssh-key
    Type: AWS::EC2::KeyPair::KeyName
  TrustedIP:
    Description: Trusted IP
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 1.1.1.1/32
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  CRWDCloud:
    Description: CrowdStrike Cloud us-1, us-2 or eu
    Type: String
    AllowedValues:
      - us-1
      - us-2
      - eu

  CSPrivLinkVpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this CSPrivLinkVPC
    Type: String
    Default: 10.192.0.0/24
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  TestVpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this CSPrivLinkVPC
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  CSPrivLinkPrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.0.0/28
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  CSPrivLinkPrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.0.32/28
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  CSPrivLinkTGWAttachSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.0.96/28
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  CSPrivLinkTGWAttachSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.0.64/28
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  TestVPCTGWAttachSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.64/28
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  TestVPCTGWAttachSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.0.96/28
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  TestVPCPrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/28
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  TestVPCPrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.0.32/28
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  LinuxAMI:
    Description: Managed AMI ID for Amazon Linux
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2'

Mappings:
  CSService:
    us-1:
      sensorProxyDnsName: 'ts01-b.cloudsink.net'
      sensorProxyVpcEndpoint: 'com.amazonaws.vpce.us-west-1.vpce-svc-08744dea97b26db5d'
      downloadServerDnsName: 'lfodown01-b.cloudsink.net'
      downloadServerVpcEndpoint : 'com.amazonaws.vpce.us-west-1.vpce-svc-0f9d8ca86ddcb7106'
    us-2:
      sensorProxyDnsName: 'ts01-gyr-maverick.cloudsink.net'
      sensorProxyVpcEndpoint: 'com.amazonaws.vpce.us-west-2.vpce-svc-08a5bb05d337fd834'
      downloadServerDnsName: 'lfodown01-gyr-maverick.cloudsink.net'
      downloadServerVpcEndpoint: 'com.amazonaws.vpce.us-west-2.vpce-svc-0e11def2d8620ae74'
    eu:
      sensorProxyDnsName: 'ts01-lanner-lion.cloudsink.net'
      sensorProxyVpcEndpoint: 'com.amazonaws.vpce.eu-central1.vpce-svc-0eb7b6ca4b7271385'
      downloadServerDnsName: 'lfodown01-lanner-lion.cloudsink.net'
      downloadServerVpcEndpoint: 'com.amazonaws.vpce.eu-central1.vpce-svc-0340142b9ab8fc564'

Resources:
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      Description: Security TransitGateway
      AutoAcceptSharedAttachments: disable
      DefaultRouteTableAssociation: disable
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} PrivateLink Demo TGW


  CSPrivLinkVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref 'CSPrivLinkVpcCIDR'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} CrowdStrike Services VPC

  CSPrivLinkTGWAttachSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'CSPrivLinkVPC'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      CidrBlock: !Ref CSPrivLinkTGWAttachSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} CrowdStrike Shared Services TGW Subnet (AZ1)
  CSPrivLinkTGWAttachSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'CSPrivLinkVPC'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      CidrBlock: !Ref CSPrivLinkTGWAttachSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} CrowdStrike Shared Services TGW Subnet (AZ2)
  CSPrivLinkPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'CSPrivLinkVPC'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      CidrBlock: !Ref 'CSPrivLinkPrivateSubnet1CIDR'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} CrowdStrike Shared Services Private Subnet (AZ1)
  CSPrivLinkPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'CSPrivLinkVPC'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      CidrBlock: !Ref 'CSPrivLinkPrivateSubnet2CIDR'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} CrowdStrike Shared Services Private Subnet (AZ2)

  CSPrivLinkPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'CSPrivLinkVPC'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} CrowdStrike Shared Services

  CSPrivLinkPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'CSPrivLinkPrivateRouteTable1'
      SubnetId: !Ref 'CSPrivLinkPrivateSubnet1'

  CSPrivLinkPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'CSPrivLinkPrivateRouteTable1'
      SubnetId: !Ref 'CSPrivLinkPrivateSubnet2'

  TestVPCPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'TestVPC'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} TestVPC

  TestVPCPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'TestVPCPrivateRouteTable'
      SubnetId: !Ref 'TestVPCHostSubnet2'

  TestVPCPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'TestVPCPrivateRouteTable'
      SubnetId: !Ref 'TestVPCHostSubnet1'

  CSPrivLinkRoute:
    Type: AWS::EC2::Route
    DependsOn: 'TestVPCTGWAttachment'
    Properties:
      RouteTableId: !Ref 'TestVPCPrivateRouteTable'
      DestinationCidrBlock: !Ref 'CSPrivLinkVpcCIDR'
      TransitGatewayId: !Ref 'TransitGateway'

  TestVPCDefRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWTestVPCAttachment
    Properties:
      RouteTableId: !Ref 'TestVPCPrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'IGWTestVPC'

  VPCSummaryRoute:
    Type: AWS::EC2::Route
    DependsOn: 'CSPrivLinkVPCTGWAttachment'
    Properties:
      RouteTableId:
        !Ref 'CSPrivLinkPrivateRouteTable1'
      DestinationCidrBlock: !Ref TestVpcCIDR
      TransitGatewayId: !Ref 'TransitGateway'

  TestVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'TestVpcCIDR'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} TestVPC

  IGWTestVPC:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TestVPC InternetGateway

  IGWTestVPCAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'IGWTestVPC'
      VpcId: !Ref 'TestVPC'

  TestVPCHostSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'TestVPC'
      CidrBlock: !Ref TestVPCPrivateSubnet1CIDR
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Test VPC Private Subnet (AZ0)

  TestVPCHostSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'TestVPC'
      CidrBlock: !Ref TestVPCPrivateSubnet2CIDR
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Test VPC Private Subnet (AZ1)
  TestVPCTGWAttachSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'TestVPC'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      CidrBlock: !Ref TestVPCTGWAttachSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Test VPC TGW Attach Subnet (AZ0)
  TestVPCTGWAttachSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'TestVPC'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      CidrBlock: !Ref TestVPCTGWAttachSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Test VPC TGW Attach Subnet (AZ1)

  CSPrivLinkVPCTGWAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      VpcId: !Ref 'CSPrivLinkVPC'
      TransitGatewayId: !Ref 'TransitGateway'
      SubnetIds:
        - !Ref 'CSPrivLinkTGWAttachSubnet1'
        - !Ref 'CSPrivLinkTGWAttachSubnet2'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} CrowdStrike Shared Services  VPC TGW Attachment
  TestVPCTGWAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      VpcId: !Ref 'TestVPC'
      TransitGatewayId: !Ref 'TransitGateway'
      SubnetIds:
        - !Ref 'TestVPCTGWAttachSubnet1'
        - !Ref 'TestVPCTGWAttachSubnet2'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Test VPC TGW Attachment

  TestVPCAttachmentPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref 'TestVPCTGWAttachment'
      TransitGatewayRouteTableId: !Ref 'CSPrivLinkVPCTGWRouteTable'


  CSPrivLinkVPCAttachmentPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref 'CSPrivLinkVPCTGWAttachment'
      TransitGatewayRouteTableId: !Ref 'TestVPCTGWRouteTable'

  TestVPCTGWRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !Ref 'TransitGateway'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Test VPC
  CSPrivLinkVPCTGWRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !Ref 'TransitGateway'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} CrowdStrike Shared Services VPC
  TestVPCTgwRtAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayRouteTableId: !Ref 'TestVPCTGWRouteTable'
      TransitGatewayAttachmentId: !Ref 'TestVPCTGWAttachment'

  CSPrivLinkVPCTgwRtAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayRouteTableId: !Ref 'CSPrivLinkVPCTGWRouteTable'
      TransitGatewayAttachmentId: !Ref 'CSPrivLinkVPCTGWAttachment'
  TestVPCDefRouteToCSPrivLinkVPC:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      TransitGatewayAttachmentId: !Ref TestVPCTGWAttachment
      DestinationCidrBlock: '0.0.0.0/0'
      TransitGatewayRouteTableId: !Ref 'TestVPCTGWRouteTable'
  TestInstanceEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  AssociateControlPort:
    Type: AWS::EC2::EIPAssociation
    DependsOn: TestInstance
    Properties:
      AllocationId: !GetAtt TestInstanceEIP.AllocationId
      NetworkInterfaceId: !Ref TestInstanceInt
  TestInstanceInt:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref TestVPCHostSubnet1
      Description: Interface for controlling traffic such as SSH
      GroupSet:
        - !Ref SSHSecurityGroup
      SourceDestCheck: true

  TestInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref LinuxAMI
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'TestInstanceInt'
          DeviceIndex: '0'


  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TestVPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: !Ref TrustedIP
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

  CrowdStrikeEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Traffic into CloudFormation Endpoint'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'CSPrivLinkVPC'
      Tags:
        - Key: Name
          Value: EndpointSG

  SensorProxyVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'CSPrivLinkVPC'
      ServiceName:  !FindInMap [CSService, !Ref 'CRWDCloud', sensorProxyVpcEndpoint]
      VpcEndpointType: 'Interface'
      PrivateDnsEnabled: False
      SubnetIds:
        - !Ref 'CSPrivLinkPrivateSubnet1'
        - !Ref 'CSPrivLinkPrivateSubnet2'
      SecurityGroupIds:
        - !Ref 'CrowdStrikeEndpointSG'

  DownloadServerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'CSPrivLinkVPC'
      ServiceName: !FindInMap
        - CSService
        - !Ref 'CRWDCloud'
        - downloadServerVpcEndpoint
      VpcEndpointType: 'Interface'
      PrivateDnsEnabled: False
      SubnetIds:
        - !Ref 'CSPrivLinkPrivateSubnet1'
        - !Ref 'CSPrivLinkPrivateSubnet2'
      SecurityGroupIds:
        - !Ref 'CrowdStrikeEndpointSG'

  TenantHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: Private HostedZone (split-horizon DNS) for CrowdStrike sensor connectivity
      Name: 'cloudsink.net.'
      VPCs:
        - VPCId: !Ref 'CSPrivLinkVPC'
          VPCRegion: !Ref AWS::Region

  SensorProxyRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref TenantHostedZone
      Name: !FindInMap [CSService, !Ref CRWDCloud, sensorProxyDnsName]
      Type: A
      AliasTarget:
        DNSName: !Select [1, !Split [':', !Select [1, !GetAtt 'SensorProxyVPCEndpoint.DnsEntries']]]
        HostedZoneId: !Select [0, !Split [':', !Select [1, !GetAtt 'SensorProxyVPCEndpoint.DnsEntries']]]
        EvaluateTargetHealth: False
      Comment: Routes all Sensor Proxy traffic over CrowdStrike's VPC endpoint service.

  DownloadServerRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref TenantHostedZone
      Name: !FindInMap [CSService, !Ref CRWDCloud, downloadServerDnsName]
      Type: A
      AliasTarget:
        DNSName: !Select [1, !Split [':', !Select [1, !GetAtt 'DownloadServerVPCEndpoint.DnsEntries']]]
        HostedZoneId: !Select [0, !Split [':', !Select [1, !GetAtt 'DownloadServerVPCEndpoint.DnsEntries']]]
        EvaluateTargetHealth: False
      Comment: Routes all Download Server traffic over CrowdStrike's VPC endpoint service.

  manageRoute53LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - manageRoute53LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      Policies:
        - PolicyName: Manage_hosted_zones
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - route53:DeleteVPCAssociationAuthorization
                - route53:DisassociateVPCFromHostedZone
                - route53:AssociateVPCWithHostedZone
                - route53:CreateVPCAssociationAuthorization
              Resource:
                - arn:aws:ec2:*:517716713836:vpc/*
                - !Join [ '', ['arn:aws:route53:::hostedzone/', !Ref TenantHostedZone]]
        - PolicyName: list_vpcs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - ec2:DescribeVpcs
              Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  lambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref S3Bucket
        S3Key: layer.zip
      Description: Layer for requests package
      LayerName: requests-package
  manageRoute53DomainsLifeCycleEvent:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: manage-r53-association.zip
      Layers:
        - !Ref lambdaLayer
      Handler: manage-r53-association.lambda_handler
      MemorySize: 128
      Role: !GetAtt "manageRoute53LambdaRole.Arn"
      Runtime: python3.7
      Timeout: 60
  TriggerLambda1:
    Type: 'Custom::TriggerLambda'
    Properties:
      HostedZoneId: !Ref 'TenantHostedZone'
      VpcId: !Ref 'TestVPC'
      Region : !Ref 'AWS::Region'
      ServiceToken: !GetAtt
        - manageRoute53DomainsLifeCycleEvent
        - Arn
Outputs:
  InstanceIPAddress:
    Description: IP address of the newly created EC2 instance
    Value: !Ref TestInstanceEIP
