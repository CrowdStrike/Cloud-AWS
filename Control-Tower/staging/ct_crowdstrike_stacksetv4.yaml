AWSTemplateFormatVersion: '2010-09-09'
Description: This template sets up a cross account IAM role in order to
  enable CrowdStrike Falcon Discover for AWS functionality.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Cross Account IAM Role.
        Parameters:
          - RoleName
          - ExternalID
          - CSAccountNumber
          - CSAssumingRoleName
    ParameterLabels:
      RoleName:
        default: IAM Role Name
      ExternalID:
        default: External ID
      CSAccountNumber:
        default: AWS Account ID to Grant Permission. Do not modify
      CSAssumingRoleName:
        default: Assuming IAM Role Name.  Do not modify
Outputs:
  RoleARN:
    Description: The ARN of the role that can be assumed by the other account.
    Value: !GetAtt 'iamRole.Arn'
Parameters:

  CrowdStrikeCloud:
    Default: us1
    Description: The CrowdStrike Cloud your CID is hosted in us1, us2, eu
    Type: String
    AllowedValues:
      - us1
      - us2
      - eu
  RoleCreationDelayTimer:
    Description: Delay timer wait for role creation before registering acct (Time in seconds)
    Type: Number
    MaxValue: 800
    Default: 60

  FalconClientId:
    Description: Falcon OAuth2 Client ID.
    Type: String
    NoEcho: 'true'

  FalconSecret:
    Description: Falcon Oath2 API secret.
    Type: String
    NoEcho: 'true'

  ExternalID:
    Description: The External ID that will be required to assume the role.
    MinLength: '1'
    Type: String

  RoleName:
    Description: The name of the cross account IAM role to be created.
    MinLength: '1'
    Type: String


  LogArchiveBucketRegion:
    Type: String
    Description: Log archive bucket region


  CSAccountNumber:
    AllowedPattern: '[0-9]+'
    Description: The 12 digit AWS account number to grant access to.
    MaxLength: '12'
    MinLength: '12'
    Type: String


  CSAssumingRoleName:
    Description: Name of the IAM role used within CrowdStrike to assume access to
      your account.
    Type: String


  LogArchiveAccount:
    Type: String
    Description: AccountId of Log Archive Bucket


Mappings:
  S3perRegion:
    us-east-1:
      NAME: crowdstrike-sa-resources-ct-us-east-1
    us-east-2:
      NAME: crowdstrike-sa-resources-ct-us-east-2
    us-west-2:
      NAME: crowdstrike-sa-resources-ct-us-west-2
    eu-west-1:
      NAME: crowdstrike-sa-resources-ct-eu-west-1
    ap-southeast-2:
      NAME: crowdstrike-sa-resources-ct-ap-southeast-2


Resources:
  iamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref 'RoleName'
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref 'ExternalID'
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'CSAccountNumber'
                  - :role/
                  - !Ref 'CSAssumingRoleName'
            Sid: ''
        Version: '2012-10-17'
      Path: /
  iamPolicyDescribeAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DescribeAPICalls
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeImages
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeVolumes
              - ec2:DescribeVpcs
              - ec2:DescribeRegions
              - ec2:DescribeSubnets
              - ec2:DescribeNetworkAcls
              - ec2:DescribeSecurityGroups
              - iam:ListAccountAliases
            Effect: Allow
            Resource: '*'
            Sid: ''
        Version: '2012-10-17'
      Roles:
        - !Ref 'iamRole'


  lambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !FindInMap [ S3perRegion, !Ref "AWS::Region", NAME ]
        S3Key: falconpy-layer.zip
      Description: Layer for falconpy package
      LayerName: requests-package


  RegisterAccountLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          CrowdStrikeCloud: !Ref CrowdStrikeCloud
          RoleCreationDelayTimer: !Ref RoleCreationDelayTimer
          central_s3_bucket_account: !Ref LogArchiveAccount
          cloudtrail_bucket_region: !Ref LogArchiveBucketRegion
          iam_role_arn: !GetAtt "iamRole.Arn"
          CSAccountNumber: !Ref CSAccountNumber
          CSAssumingRoleName: !Ref CSAssumingRoleName
          LocalAccount: !Ref AWS::AccountId
          aws_region: !Ref AWS::Region

      Code:
        S3Bucket: !FindInMap [ S3perRegion, !Ref "AWS::Region", NAME ]
        S3Key: register_new_accountv4.zip
      Layers:
        - !Ref lambdaLayer
      Handler: register_new_accountv4.lambda_handler
      MemorySize: 128
      Role: !GetAtt "CrowdStrikeRegisterAcctLambdaRole.Arn"
      Runtime: python3.7
      Timeout: 900

  TriggerAccountRegistration:
    Type: 'Custom::TriggerAccountRegistration'
    DependsOn:
      - CrowdStrikeRegisterAcctLambdaRole
    Properties:
      FalconSecret: !Ref FalconSecret
      FalconClientId: !Ref FalconClientId
      ExternalID: !Ref ExternalID
      ServiceToken: !GetAtt
        - RegisterAccountLambda
        - Arn

  CrowdStrikeRegisterAcctLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CrowdStrikeRegisterAcctLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess

