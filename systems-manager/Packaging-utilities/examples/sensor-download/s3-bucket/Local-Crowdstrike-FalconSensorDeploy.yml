
description: Automation Document for installing the Crowdstike's Falcon Sensor .
schemaVersion: '0.3'
assumeRole: '{{AutomationAssumeRole}}'
parameters:
  AWSRegion:
    type: String
  InstallerParams:
    type: String
    default: ''
    description: (Optional) Enter CrowdStrike's install time params here. For more info refer Falcon console documentation.
  Action:
    type: String
    allowedValues:
      - Install
      - Uninstall
    description: (Required) Specify whether or not to install or uninstall the package.
    default: Install
  InstallationType:
    type: String
    allowedValues:
      - Uninstall and reinstall
    description: '(Optional) Specify the type of installation. Uninstall and reinstall: The application is taken offline until the reinstallation process completes. In-place update: The application is available while new or updated files are added to the installation.'
    default: Uninstall and reinstall
  PackageName:
    type: String
    description: '(Required) The CrowdStrike package name. For Windows use FalconSensor-Windows, for linux use FalconSensor-linux.'
  PackageVersion:
    type: String
    description: '(Optional) The version of the package to install or uninstall. If you donâ€™t specify a version, the system installs the latest published version by default. The system will only attempt to uninstall the version that is currently installed. If no version of the package is installed, the system returns an error.'
    default: ''
  APIGatewayHostKey:
    type: String
    description: '(Required) Crowdstrike''s API Gateway host address Key, this key is retrieved from the Parameter Store Service.'
    default: CS_API_GATEWAY_HOST
  APIGatewayClientIDKey:
    type: String
    default: |
      CS_API_GATEWAY_CLIENT_ID
    description: '(Required) Crowdstrike''s API Gateway Client ID Key, this key is retrieved from the Parameter Store Service.'
  APIGatewayClientSecretKey:
    type: String
    description: '(Required) Crowdstrike''s API Gateway Client Secret Key, this key is retrieved from the Parameter Store Service.'
    default: CS_API_GATEWAY_CLIENT_SECRET
  FalconSensorVersion:
    type: String
    description: '(Required) The version -x of latest that the sensor download option will install eg 0,1,2'
    default: CS_SENSOR_VERSION
  InstanceIds:
    type: StringList
  Targets:
    type: MapList
    default: []
  AutomationAssumeRole:
    type: String
mainSteps:
  - name: GetAuthenticationToken
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.7
      Handler: script_handler
      Script: |-
        import http.client
        import mimetypes
        import urllib.parse
        import boto3
        import json
        def script_handler(events, context):
          ssm = boto3.client('ssm', region_name=events["AWSRegion"])

          print('Fetching required configuration from Parameter Service')

          print('... Fetching FalconSensorVersion')
          falconSensorVersionResponse = ssm.get_parameter(Name=events["FalconSensorVersion"], WithDecryption=True)
          if falconSensorVersionResponse['ResponseMetadata']['HTTPStatusCode'] != 200:
            raise ValueError('Required property {} not found'.format(events["FalconSensorVersion"]))

          print('... Fetching APIGatewayHostKey')
          apiGatewayHostResponse = ssm.get_parameter(Name=events["APIGatewayHostKey"], WithDecryption=True)
          if apiGatewayHostResponse['ResponseMetadata']['HTTPStatusCode'] != 200:
            raise ValueError('Required property {} not found'.format(events["APIGatewayHostKey"]))

          print('... Fetching APIGatewayClientIDKey')
          apiGatewayClientIDResponse = ssm.get_parameter(Name=events["APIGatewayClientIDKey"], WithDecryption=True)
          if apiGatewayClientIDResponse['ResponseMetadata']['HTTPStatusCode'] != 200:
            raise ValueError('Required property {} not found'.format(events["APIGatewayClientIDKey"]))

          print('... Fetching APIGatewayClientSecretKey')
          apiGatewayClientSecretResponse = ssm.get_parameter(Name=events["APIGatewayClientSecretKey"], WithDecryption=True)
          if apiGatewayClientSecretResponse['ResponseMetadata']['HTTPStatusCode'] != 200:
            raise ValueError('Required property {} not found'.format(events["APIGatewayClientSecretKey"]))

          apiGatewayHostValue = apiGatewayHostResponse['Parameter']['Value']
          falconSensorVersionValue = falconSensorVersionResponse['Parameter']['Value']
          apiGatewayClientIDValue = apiGatewayClientIDResponse['Parameter']['Value']
          apiGatewayClientSecretValue = apiGatewayClientSecretResponse['Parameter']['Value']

          try:
            print('Requesting Authentication token from Crowdstrike backend.')
            conn = http.client.HTTPSConnection(apiGatewayHostValue)
            params = urllib.parse.urlencode({'client_id': apiGatewayClientIDValue, 'client_secret': apiGatewayClientSecretValue})
            headers = {'Content-Type': 'application/x-www-form-urlencoded'}
            conn.request("POST", "/oauth2/token", params, headers)
            res = conn.getresponse()

            if res.status != 201:
              raise ValueError('Received non success response {}. Error {}'.format(res.status, res.reason))

            data = res.read()
            print('Successfully received OAuth token.')
            return {'AuthToken': json.loads(data)['access_token'],'ApiGatewayHost': apiGatewayHostValue,'FalconSensorVersionVal': falconSensorVersionValue}
          except Exception as e:
            raise ValueError('Failure while interacting with Crowdstrike backend. Error: {}'.format(e))
      InputPayload:
        AWSRegion: '{{AWSRegion}}'
        APIGatewayHostKey: '{{APIGatewayHostKey}}'
        APIGatewayClientIDKey: '{{APIGatewayClientIDKey}}'
        APIGatewayClientSecretKey: '{{APIGatewayClientSecretKey}}'
        FalconSensorVersion: '{{FalconSensorVersion}}'
    outputs:
      - Name: AuthToken
        Selector: $.Payload.AuthToken
        Type: String
      - Name: ApiGatewayHost
        Selector: $.Payload.ApiGatewayHost
        Type: String
      - Name: FalconSensorVersionVal
        Selector: $.Payload.FalconSensorVersionVal
        Type: String
  - name: GetCustomerIdentifier
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.7
      Handler: script_handler
      Script: |
        import http.client
        import mimetypes
        import urllib.parse
        import json
        def script_handler(events, context):
          try:
            print('Requesting Customer ID from Crowdstrike backend.')
            conn = http.client.HTTPSConnection(events["ApiGatewayHost"])
            headers = {
              'Authorization': "Bearer {}".format(events["AuthToken"])
            }

            conn.request("GET", "/sensors/queries/installers/ccid/v1", "", headers)
            res = conn.getresponse()

            if res.status != 200:
              raise ValueError('Received non success response {}. Error {}'.format(res.status, res.reason))

            data = res.read()
            print('Successfully received Customer ID.')
            return {'CCID': json.loads(data)['resources'][0]}
          except Exception as e:
            raise ValueError('Failure while interacting with Crowdstrike backend. Error {}'.format(e))
      InputPayload:
        AuthToken: '{{GetAuthenticationToken.AuthToken}}'
        ApiGatewayHost: '{{GetAuthenticationToken.ApiGatewayHost}}'
    outputs:
      - Name: CCID
        Selector: $.Payload.CCID
        Type: String
  - name: GetInstallationToken
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.6
      Handler: script_handler
      Script: |-
        import http.client
        import mimetypes
        import urllib.parse
        import json
        def script_handler(events, context):
          try:
            print('Requesting Installtion Token from Crowdstrike backend.')
            conn = http.client.HTTPSConnection(events["ApiGatewayHost"])

            headers = {
              'Authorization': "Bearer {}".format(events["AuthToken"])
            }

            conn.request("GET", "/installation-tokens/queries/tokens/v1?filter=status:'valid'", "", headers)
            queryRes = conn.getresponse()

            if queryRes.status != 200:
              raise ValueError('Received non success response {} while querying for token. Error {}'.format(queryRes.status, queryRes.reason))

            queryResData = queryRes.read()
            resId = json.loads(queryResData)['resources'][0]

            url ="/installation-tokens/entities/tokens/v1?ids={}".format(resId)
            conn.request("GET", url, "", headers)
            entitiesRes = conn.getresponse()

            if entitiesRes.status != 200:
              raise ValueError('Received non success response {} while fetching token by id. Error {}'.format(entitiesRes.status, entitiesRes.reason))

            entitiesResData = entitiesRes.read()
            token = json.loads(entitiesResData)['resources'][0]['value']

            print('Successfully received Installation token')
            return {'InstallationToken': token }
          except Exception as e:
            raise ValueError('Failure while interacting with Crowdstrike backend. Error {}'.format(e))
      InputPayload:
        AuthToken: '{{GetAuthenticationToken.AuthToken}}'
        ApiGatewayHost: '{{GetAuthenticationToken.ApiGatewayHost}}'
    outputs:
      - Selector: $.Payload.InstallationToken
        Name: InstallationToken
        Type: String
  - name: ExecuteDistributorPackage
    action: 'aws:runCommand'
    inputs:
      Targets: '{{ Targets }}'
      InstanceIds: '{{ InstanceIds }}'
      DocumentName: AWS-ConfigureAWSPackage
      Parameters:
        name: '{{PackageName}}'
        action: '{{Action}}'
        version: '{{PackageVersion}}'
        additionalArguments:
          SSM_CS_INSTALLTOKEN: '{{GetInstallationToken.InstallationToken}}'
          SSM_CS_CCID: '{{GetCustomerIdentifier.CCID}}'
          SSM_CS_INSTALLPARAMS: '{{InstallerParams}}'
          SSM_CS_AUTH_TOKEN: '{{GetAuthenticationToken.AuthToken}}'
          SSM_CS_HOST: '{{GetAuthenticationToken.ApiGatewayHost}}'
          SSM_CS_NCNT: '{{GetAuthenticationToken.FalconSensorVersionVal}}'