AWSTemplateFormatVersion: '2010-09-09'
#
# Version 1
# Creates a Stackset in AWS Control Tower to Enable CrowdStrike Horizon
#
Description: Creates a Stackset in AWS Control Tower to Enable CrowdStrike Horizon
Parameters:
  FalconClientId:
    Description: Your Falcon OAuth2 Client ID.
    NoEcho: 'true'
    Type: String
  FalconSecret:
    Description: Your Falcon OAuth2 API Secret.
    NoEcho: 'true'
    Type: String
  CSAccountNumber:
    Default: '292230061137'
    Description: CrowdStrike Account ID.
    Type: String
  CSAssumingRoleName:
    Type: String
    Description: Assuming IAM Role Name
    Default: 'CrowdStrikeCSPMConnector'
  CrowdStrikeCSPMRoleTemplateURL:
    Type: String
    Description: 'CrowdStrike CSPM Role definition'
    Default: 'https://cs-prod-cloudconnect-templates.s3-us-west-1.amazonaws.com/aws_cspm_cloudformation_v1.1.json '
  CrowdStrikeCSPMStackName:
    Type: String
    Description: 'CrowdStrike CSPM StackName'
    Default: "CrowdStrike-CSPM-Integration"

Mappings:
  S3perRegion:
    us-east-1:
      NAME: crowdstrike-sa-resources-ct-us-east-1
    us-east-2:
      NAME: crowdstrike-sa-resources-ct-us-east-2
    us-west-2:
      NAME: crowdstrike-sa-resources-ct-us-west-2
    eu-west-1:
      NAME: crowdstrike-sa-resources-ct-eu-west-1
    ap-southeast-2:
      NAME: crowdstrike-sa-resources-ct-ap-southeast-2

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: CrowdStrike Defined Parameters. (Do Not Modify)
        Parameters:
          - CrowdStrikeCSPMStackName
          - CrowdStrikeCSPMRoleTemplateURL
          - CSAccountNumber
          - CSAssumingRoleName
      - Label:
          default: CrowdStrike Falcon API keys. (From CrowdStrike Console)
        Parameters:
          - FalconClientId
          - FalconSecret
Resources:
  CrowdStrikeCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: CrowdStrike Credentials
      Name: !Join
              - '-'
              - - CrowdStrikeHorizonAPISecret
                - !Ref 'AWS::StackName'
      SecretString:
        Fn::Join:
          - ''
          - - '{"FalconClientId":"'
            - Ref: FalconClientId
            - '","FalconSecret": "'
            - Ref: FalconSecret
            - '"}'
  LambdaToCreateStackSetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - CrowdStrikeLambdaCreateStackSetRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      Policies:
        - PolicyName: Get_Values
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor1
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref CrowdStrikeCredentials
        - PolicyName: List_secrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - secretsmanager:ListSecrets
              Resource: '*'
        - PolicyName: CloudFormation_ops
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - cloudformation:CreateStackSet
                - cloudformation:CreateStackInstances
                - cloudformation:DescribeStackSet
                - cloudformation:ListStackInstances
                - cloudformation:DeleteStackInstances
                - cloudformation:DeleteStackSet
              Resource: !Join [ ':', [ 'arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/*:*' ] ]
        - PolicyName: Pass_Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor3
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: !Join [ ':', [ 'arn:aws:iam:', !Ref "AWS::AccountId", 'role/service-role/AWSControlTowerStackSetRole' ] ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
  CreateStackSetPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "LambdaToCreateStackSet.Arn"
      Principal: cloudformation.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
  LambdaToCreateStackSet:
    Type: 'AWS::Lambda::Function'
    DeletionPolicy: Delete
    Properties:
      Code:
        S3Bucket: !FindInMap [ S3perRegion, !Ref "AWS::Region", NAME ]
        S3Key: create_horizon_stackset_lambda.zip
      Layers:
        - !Ref lambdaLayer
      Environment:
        Variables:
          RoleName: ""
          AwsRegion: !Ref AWS::Region
          CSAccountNumber: !Ref CSAccountNumber
          CSAssumingRoleName: !Ref CSAssumingRoleName

      Handler: create_horizon_stackset_lambda.lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Role: !GetAtt "LambdaToCreateStackSetRole.Arn"
      Timeout: 180
  TriggerLambdaToCreateStackSet:
    Type: 'Custom::TriggerLambda'
    Properties:
      CrowdStrikeCSPMStackName: !Ref CrowdStrikeCSPMStackName
      CrowdStrikeCSPMRoleTemplateURL: !Ref CrowdStrikeCSPMRoleTemplateURL
      ServiceToken: !GetAtt
        - LambdaToCreateStackSet
        - Arn
  lambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !FindInMap [ S3perRegion, !Ref "AWS::Region", NAME ]
        S3Key: layer.zip
      Description: Layer for requests package
      LayerName: requests-package
  CrowdStrikeHorizonCaptureControlTowerLifeCycleEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events and Trigger an Action
      EventPattern:
        detail:
          eventName:
            - CreateManagedAccount
            - UpdateManagedAccount
          eventSource:
            - controltower.amazonaws.com
        detail-type:
          - AWS Service Event via CloudTrail
        source:
          - aws.controltower
      Name: CrowdStrikeHorizonCaptureControlTowerLifeCycleEvents
      State: ENABLED
      Targets:
        - Arn: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
          Id: IDCrowdStrikeHorizonCaptureControlTowerLifeCycleEvents
  LambdaRoleToCaptureEvents:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - LambdaRoleToCaptureEvents
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      Policies:
        - PolicyName: get_secrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - secretsmanager:ListSecrets
              Resource: !Join [ ':',[ 'arn:aws:secretsmanager', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'secret:', !Ref CrowdStrikeCredentials] ]
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStackInstances'
                Resource: !Join [ ':',[ 'arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/*:*' ] ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  TriggerCustomizationsOnLifeCycleEvent:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [ S3perRegion, !Ref "AWS::Region", NAME ]
        S3Key: push_horizon_stackset_lambda.zip
      Layers:
        - !Ref lambdaLayer
      Environment:
        Variables:
          CSAccountNumber: !Ref CSAccountNumber
          CSAssumingRoleName: !Ref CSAssumingRoleName
          CrowdStrikeCredentialsSecret: !Ref CrowdStrikeCredentials
      Handler: push_horizon_stackset_lambda.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaRoleToCaptureEvents.Arn"
      Runtime: python3.7
      Timeout: 60
  PermissionForEventsToInvokeLambdachk:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "CrowdStrikeHorizonCaptureControlTowerLifeCycleEvents.Arn"
